# 
msgid ""
msgstr ""
"Project-Id-Version: SudokuStudyLib 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-18 05:24+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\program.rst:2
msgid "Start Programming to Solve a Sudoku"
msgstr ""

#: ..\program.rst:4
msgid ""
"When we have created a sudoku simulate world in the computer to solve a "
"sudoku, now we should go ahead to implement some methods which we solve it "
"in our own hands. In other world, programming, is the stuff which we teach "
"computer to do something that we have known it."
msgstr ""

#: ..\program.rst:7
msgid ""
"We first introduce the solve environment, then we will introduce some basic "
"methods in this library."
msgstr ""

#: ..\program.rst:11
msgid "Solving Environment"
msgstr ""

#: ..\program.rst:13
msgid ""
"We create a function solve() to do the real solving a sudoku, and we make "
"two exception classes, SudokuDone, SudokuError to capture event happen when "
"we use methods to solve a sudoku."
msgstr ""

#: ..\program.rst:15
msgid "What is \"Exception\"?"
msgstr ""

#: ..\program.rst:17
msgid ""
"Exception is an event defined, when the event condition has occurred, system"
" will stop the processing and jump to the exception processing. There are "
"two major exceptions in the environment:"
msgstr ""

#: ..\program.rst:21
msgid "SudokuDone:"
msgstr ""

#: ..\program.rst:21
msgid "when the sudoku has been solved, will raise this exception"
msgstr ""

#: ..\program.rst:23
msgid "SudokuError:"
msgstr ""

#: ..\program.rst:24
msgid ""
"when a country people to set in a house, but will break the rule of game, "
"this will raise this exception"
msgstr ""

#: ..\program.rst:26
msgid ""
"To let the environment know how many methods they can use to solve a sudoku,"
" we create a class, SolveMethod. We use this class to create all methods in "
"a BRAIN. We can treat this BRAIN like the god of this valley. Every time, "
"when people don't how to choose their suitable houses, you can ask the god "
"of valley, and it will give an answer, or it would say that, \"**I don't "
"know how to do either!**\""
msgstr ""

#: ..\program.rst:29
msgid ""
"Every method register in the Brain as a SovleMethod object, they have these "
"major properties:"
msgstr ""

#: ..\program.rst:31
msgid "fun: the function name of the method in python coding"
msgstr ""

#: ..\program.rst:32
msgid ""
"idx: the index of the method, from the easier to the more difficult, the "
"brain will use this sequence to solve a game one by one."
msgstr ""

#: ..\program.rst:33
msgid "name: the name of the method"
msgstr ""

#: ..\program.rst:34
msgid ""
"level: the difficult level for human, using to count a game's difficult "
"level"
msgstr ""

#: ..\program.rst:37
msgid "Solving Process"
msgstr ""

#: ..\program.rst:39
msgid "The following is the flow chart of solve():"
msgstr ""

#: ..\program.rst:43
msgid "**WORK or NOT WORK?**"
msgstr ""

#: ..\program.rst:45
msgid "A method works or not means that using this method can:"
msgstr ""

#: ..\program.rst:47
msgid "let one or more people to find his or their own house,"
msgstr ""

#: ..\program.rst:48
msgid ""
"OR can let one or more houses know they are not allowed for some countries' "
"people."
msgstr ""

#: ..\program.rst:50
msgid "In this flow chart, we know that:"
msgstr ""

#: ..\program.rst:52
msgid ""
"When a method works to set a person or reduce a house's allowed people, it "
"will return to the first method to restart solving the game."
msgstr ""

#: ..\program.rst:53
msgid ""
"If a method can't work to solve a game, it will give the game to the next "
"method to solve it."
msgstr ""

#: ..\program.rst:54
msgid ""
"And if final method can't solve a game, it will go out and say \"I can't "
"figure out this game, sorry!\""
msgstr ""

#: ..\program.rst:55
msgid "In the solving process, if \"Done\" or \"Error\" event occur, it will go out."
msgstr ""

#: ..\program.rst:58
msgid "Some Basic Methods"
msgstr ""

#: ..\program.rst:60
msgid "fill_only_one_possible:"
msgstr ""

#: ..\program.rst:62
msgid ""
"Find every house in a group, if there is only one house that one country "
"people can live there, that house must let that country's people to live in."
msgstr ""

#: ..\program.rst:64
msgid "fill_last_position_of_group:"
msgstr ""

#: ..\program.rst:66
msgid ""
"When in a group(line or box) are only one left, it must allow only one "
"country people to live there."
msgstr ""

#: ..\program.rst:68
msgid "check_obvious_number:"
msgstr ""

#: ..\program.rst:70
msgid ""
"Check every country people who has lived in a house, and when these people "
"observe other boxes which has yet not lived their country people, can find "
"an only house that allowed their country people or not?"
msgstr ""

#: ..\program.rst:73
msgid "check_inobvious_number:"
msgstr ""

#: ..\program.rst:75
msgid ""
"It is the same method as check_obvious_number, but some boxes' houses are "
"formed as a **Group Number**."
msgstr ""

#: ..\program.rst:0
msgid "What is a **Chain**?"
msgstr ""

#: ..\program.rst:79
msgid ""
"Chain is formed by two or above houses. In these houses, the amount of all "
"different possible countries' people are equal to the amount of the houses. "
"When a chain have formed, we can reduce the possible countries' people from "
"the other houses in the same group of this chain."
msgstr ""

#: ..\program.rst:82
msgid "reduce_by_group_number:"
msgstr ""

#: ..\program.rst:84
msgid ""
"If there is a **Group Number** in a box, the empty houses of its same "
"direction could be reduce the possible country people of this Group Number."
msgstr ""

#: ..\program.rst:86
msgid "update_chain:"
msgstr ""

#: ..\program.rst:88
msgid ""
"As the houses have been lived some people, this would make some empty houses"
" reduce some possible countries' people. And then these empty houses in a "
"group(x-way line, y-way line, box) may form a **Chain**."
msgstr ""

#: ..\program.rst:92
msgid "How to implement a method?"
msgstr ""

#: ..\program.rst:94
msgid ""
"We could implement a method called check_obvious_for_a_country(m, num) "
"method as an example:"
msgstr ""

#: ..\program.rst:121
msgid ""
"line#1, define a method, *m* is the world of this game, and **num** is a "
"country id, here is 1-9."
msgstr ""

#: ..\program.rst:122
msgid ""
"line#3, starts to find the all people who have lived in a house of a "
"country."
msgstr ""

#: ..\program.rst:123
msgid "line#4-9, it scan all its effect boxes if those have not been checked."
msgstr ""

#: ..\program.rst:124
msgid "line#10-11, it the country people have live in this box, ignore it."
msgstr ""

#: ..\program.rst:125
msgid ""
"line#12-19, check all empty houses in this box which allow the country's "
"people or not, if yes, put it in the Possible List."
msgstr ""

#: ..\program.rst:126
msgid ""
"line#20-21, if the Possible List has only one house, it must can be assigned"
" this house to the country's people."
msgstr ""
